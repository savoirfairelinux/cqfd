#!/usr/bin/env bash

. "$(dirname $0)"/jtest.inc "$1"

################################################################################
# 'cqfd --version' shall be an accepted command
################################################################################
jtest_prepare "cqfd --version shall exit normally"
TEST=$(mktemp)

if ! $TDIR/.cqfd/cqfd --version >$TEST; then
	jtest_result fail
	rm -f $TEST
else
	jtest_result pass
fi

################################################################################
# 'cqfd --version' shall produce a version message
################################################################################
jtest_prepare "cqfd --version shall produce a version string"

if grep -qE "^[0-9.]+(-[a-z]+)?\$" $TEST; then
	jtest_result pass
else
	jtest_log error "not a version message"
cat $TEST >&2
	jtest_result fail
fi

################################################################################
# 'cqfd --version' shall match the latest documented version
################################################################################
jtest_prepare "cqfd --version major number shall match the latest documented version"

doc=$(grep '^## Version' $TDIR/CHANGELOG.md  | head -1 | grep -Eo '[0-9.]+(-[a-z]+)?' | head -1)
version="$(cat $TEST)"

if [ "$doc" = "$version" ]; then
	jtest_result pass
else
	jtest_log error "version major number doesn't match the doc"
cat "$TEST" >&2
	jtest_result fail
fi

rm -f "$TEST"
