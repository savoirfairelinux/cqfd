#!/usr/bin/env bash
#
# validate the behavior of run -c command with flavors

. "$(dirname "$0")"/jtest.inc "$1"
cqfd="$TDIR/.cqfd/cqfd"
test_file="a/cqfd_a.txt"
test_run_c_file="test_run_c.txt"

cd "$TDIR/"

test_setup() {
	if [ -f "$test_file" ] || [ -f "$test_run_c_file" ]; then
		jtest_log fatal "$test_file or $test_run_c_file already present before test"
		rm -f "$test_file"
		rm -f "$test_run_c_file"
	fi
}

test_cleanup() {
	rm -f "$test_file"
	rm -f "$test_run_c_file"
}

# Append default command build with an additional option
test_step1() {
	jtest_prepare "running \"cqfd run -c\" makes it run with appended arguments"
	"$cqfd" run -c --debug >> "$test_run_c_file"

	# at the end of this test, $test_run_c_file is populated
	if ! grep -qw "target 'build'" "$test_run_c_file"; then
		jtest_log fatal "$test_run_c_file not present after test"
		jtest_result fail
		rm -f "$test_run_c_file"
		return
	fi

	# at the end of either test, $test_file is populated
	if ! grep -qw "cqfd" "$test_file"; then
		jtest_log fatal "$test_file not present after test"
		jtest_result fail
		rm -f "$test_file"
		return
	else
		jtest_result pass
	fi
}
    
# Build the default command with run -c
test_step2() {
	jtest_prepare "running \"cqfd run -c\" with no argument makes it fail"
	"$cqfd" run -c
	[ "$?" -eq 0 ] && jtest_result fail || jtest_result pass
}

test_setup
test_step1
test_cleanup

test_setup
test_step2
test_cleanup
