#!/usr/bin/env bash
#
# validate the .cqfdrc syntax

set -o pipefail

. "$(dirname "$0")"/jtest.inc "$1"
cqfd="$TDIR/.cqfd/cqfd"

cd "$TDIR/" || exit 1

cqfdrc_old=$(mktemp)
cp -f .cqfdrc "$cqfdrc_old"

echo -n "" >.cqfdrc

jtest_prepare "cqfdrc fails if no project section"
if "$cqfd" 2>&1 | grep "cqfd: fatal: .cqfdrc: Missing project section!";
   test "${PIPESTATUS[0]}" -eq 1 -a "${PIPESTATUS[1]}" -eq 0; then
	jtest_result pass
else
	jtest_result fail
fi

echo "[project]" >>.cqfdrc

jtest_prepare "cqfdrc fails if no name property set in project section"
if "$cqfd" 2>&1 | grep "cqfd: fatal: .cqfdrc: Missing project.org or project.name properties";
   test "${PIPESTATUS[0]}" -eq 1 -a "${PIPESTATUS[1]}" -eq 0; then
	jtest_result pass
else
	jtest_result fail
fi

echo "name=test" >>.cqfdrc

jtest_prepare "cqfdrc fails if no org property set in project section"
if "$cqfd" 2>&1 | grep "cqfd: fatal: .cqfdrc: Missing project.org or project.name properties";
   test "${PIPESTATUS[0]}" -eq 1 -a "${PIPESTATUS[1]}" -eq 0; then
	jtest_result pass
else
	jtest_result fail
fi

echo "org=test" >>.cqfdrc

jtest_prepare "cqfdrc fails if no build section"
if "$cqfd" 2>&1 | grep "cqfd: fatal: .cqfdrc: Missing build section!";
   test "${PIPESTATUS[0]}" -eq 1 -a "${PIPESTATUS[1]}" -eq 0; then
	jtest_result pass
else
	jtest_result fail
fi

echo "[build]" >>.cqfdrc

jtest_prepare "cqfdrc fails if no command property set in build section"
if "$cqfd" 2>&1 | grep "cqfd: fatal: .cqfdrc: Missing or empty build.command property";
   test "${PIPESTATUS[0]}" -eq 1 -a "${PIPESTATUS[1]}" -eq 0; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfdrc succeeds if project and build sections are set correctly"
if "$cqfd" init && "$cqfd" run true; then
	jtest_result pass
else
	jtest_result fail
fi

jtest_prepare "cqfdrc succeeds even if no command property set in build section using run -c"
if "$cqfd" run -c true 2>&1 | grep "cqfd: warning: .cqfdrc: Missing or empty build.command property";
   test "${PIPESTATUS[0]}" -eq 0 -a "${PIPESTATUS[1]}" -eq 0; then
	jtest_result pass
else
	jtest_result fail
fi

echo "command=true" >>.cqfdrc

jtest_prepare "cqfdrc succeeds if command property set in build section using run -c"
if "$cqfd" run -c true 2>&1 | grep "cqfd: warning: .cqfdrc: Missing or empty build.command property";
   test "${PIPESTATUS[0]}" -eq 0 -a "${PIPESTATUS[1]}" -ne 0; then
	jtest_result pass
else
	jtest_result fail
fi

cp -f "$cqfdrc_old" .cqfdrc
sed -i -e "/[build]/,/^$/s,^command=.*$,command='true; echo \"It works!\"'," .cqfdrc

jtest_prepare "cqfdrc does not strip semicolons in command"
if "$cqfd" | grep "It works!" ; then
	jtest_result pass
else
	jtest_result fail
fi

cp -f "$cqfdrc_old" .cqfdrc
echo "foo	=bar" >>.cqfdrc

jtest_prepare "cqfdrc with tabulation before should not pass"
if ! "$cqfd" run true; then
	jtest_result pass
else
	jtest_result fail
fi

cp -f "$cqfdrc_old" .cqfdrc
echo "foo=	bar" >>.cqfdrc

jtest_prepare "cqfdrc with tabulation after should not pass"
if ! "$cqfd" run true; then
	jtest_result pass
else
	jtest_result fail
fi

cp -f "$cqfdrc_old" .cqfdrc
echo "foo =bar" >>.cqfdrc

jtest_prepare "cqfdrc with space before should not pass"
if ! "$cqfd" run true; then
	jtest_result pass
else
	jtest_result fail
fi

cp -f "$cqfdrc_old" .cqfdrc
echo "foo= bar" >>.cqfdrc

jtest_prepare "cqfdrc with space after should not pass"
if ! "$cqfd" run true; then
	jtest_result pass
else
	jtest_result fail
fi

mv -f "$cqfdrc_old" .cqfdrc
